{
	"varinit": {
		"prefix": "varInit",
		"body": [
			"List<NationalAssemblyPollsResult> nationalAssemblyResultList = new List<NationalAssemblyPollsResult>(); List<ProvincialAssemblyPollResult> provincialAssemblyPollResultList = new List<ProvincialAssemblyPollResult>(); List<ProvinceHelper> provinceHelperList = new List<ProvinceHelper>();"
		],
		"description": "chart variable initializations"
	},
	"pac": {
		"prefix": "provinAssemblyChart",
		"body": [
			"StreamBuilder<QuerySnapshot>( stream: Firestore.instance.collection('polls').snapshots(), builder: (context, snapshot) { provincialAssemblyPollResultList = new List<ProvincialAssemblyPollResult>();",
			"if (!snapshot.hasData) return LinearProgressIndicator( backgroundColor: Colors.orange, ); DocumentSnapshot first = snapshot.data.documents.last; var pollResults = first['pollOptionsBalochistan'][0];",
			"provincialAssemblyPollResultList.add( new ProvincialAssemblyPollResult( 'Balochistan', pollResults['numberOfVotes'], pollResults['initials'], charts.Color.fromHex( code: pollResults['color'])));",
			"var pollResultsKPK = first['pollOptionsKPK'][0]; provincialAssemblyPollResultList.add( new ProvincialAssemblyPollResult( 'KPK', pollResultsKPK['numberOfVotes'], pollResultsKPK['initials'], charts.Color.fromHex( code: pollResultsKPK['color'])));",
			"var pollResultsPunjab = first['pollOptionsPunjab'][0]; provincialAssemblyPollResultList.add( new ProvincialAssemblyPollResult( 'Punjab', pollResultsPunjab['numberOfVotes'], pollResultsPunjab['initials'], charts.Color.fromHex( code: pollResultsPunjab['color'])));",
			"var pollResultsSindh = first['pollOptionsSindh']; pollResultsSindh.forEach((element) => provinceHelperList.add(new ProvinceHelper(${sindh}, element['numberOfVotes'], element['initials'], charts.Color.fromHex(code: element['color'])))); provinceHelperList .sort((a, b) => a.votes.compareTo(b.votes)); var sindhPartyWithMaxVotes = provinceHelperList[provinceHelperList.length - 1]; provincialAssemblyPollResultList.add( new ProvincialAssemblyPollResult(${sindh2}, sindhPartyWithMaxVotes.votes, sindhPartyWithMaxVotes.party, sindhPartyWithMaxVotes.color)); var provincialSeries = [ charts.Series<ProvincialAssemblyPollResult, String>( id: 'provincialChart', colorFn: (ProvincialAssemblyPollResult winner, _) => winner.color, domainFn: (ProvincialAssemblyPollResult winner, _) => winner.province, measureFn: (ProvincialAssemblyPollResult winner, _) => winner.votes, data: provincialAssemblyPollResultList, labelAccessorFn: (ProvincialAssemblyPollResult winner, _) => winner.party, ), ]; var barChart = charts.BarChart( provincialSeries, animate: false, vertical: false, barRendererDecorator: charts.BarLabelDecorator<String>(), ); return Padding( padding: const EdgeInsets.symmetric(horizontal: 8.0), child: barChart, ); }, ),"
		],
		"description": "Provincial asembly chart"
	},
	"Chart Header": {
		"prefix": "chartHeader",
		"body": [
			"Padding( padding: const EdgeInsets.only(top: 32.0, left: 16.0), child: Text( ${ChartHeader}, textAlign: TextAlign.start, style: TextStyle( color: Theme.of(context).accentColor, fontWeight: FontWeight.bold), ), ),"
		],
		"description": "Creates submit button for National Assembly poll."
	},
	"chartImports":{
		"prefix": "chartImports",
		"body": [
			"import 'package:flutter/material.dart'; import 'package:charts_flutter/flutter.dart' as charts; import 'package:cloud_firestore/cloud_firestore.dart'; import '../models/helpers.dart';"
		],
		"description": "chart control imports"
	},
	"drawer":{
		"prefix":"drawerVoteApp",
		"body": 
		[
			"return Drawer( child: ListView( padding: EdgeInsets.zero, children: [ DrawerHeader( child: Row(crossAxisAlignment: CrossAxisAlignment.center, children: [ SizedBox(height: 40.0, child: Image.asset('assets/vote5.png')), ]), decoration: BoxDecoration( image: DecorationImage( image: AssetImage('assets/vote.png'), fit: BoxFit.cover, ), ), ), ListTile( title: Row( children: [ Icon(Icons.assessment, color: Theme.of(context).primaryColor), Padding( padding: const EdgeInsets.only(left: 8.0), child: Text('Live Results'), ), ], ), onTap: () { Navigator.pop(context); controller.jumpToPage(2); }, ), Divider( color: Colors.grey, ), ListTile( title: Row( children: [ Icon(Icons.settings, color: Theme.of(context).primaryColor), Padding( padding: const EdgeInsets.only(left: 8.0), child: Text('Settings'), ), ], ), onTap: null, ), ListTile( title: Row( children: [ Icon(Icons.help_outline, color: Theme.of(context).primaryColor), Padding( padding: const EdgeInsets.only(left: 8.0), child: Text('Help & Feedback'), ), ], ), onTap: null, ), ListTile( title: Row( children: [ Icon(Icons.info, color: Theme.of(context).primaryColor), Padding( padding: const EdgeInsets.only(left: 8.0), child: Text('About'), ), ], ), onTap: null, ), ], ), );"
		],
		"description": "app drawer"
	},
	"Stream builder NA": {
		"prefix": "streamNA",
		"body": [
			"StreamBuilder<QuerySnapshot>( stream: Firestore.instance.collection('polls').snapshots(), builder: (context, snapshot) { if (!snapshot.hasData) return LinearProgressIndicator(); DocumentSnapshot nationalAssemblyPoll = snapshot.data.documents.first; var pollOptionsArray = nationalAssemblyPoll['pollOptions']; int index = 0; return ${listView}; }, )"
		],
		"description": "Creates stream builder for National Assembly poll."
	},
	"Variables for NA": {
		"prefix": "variablesNA",
		"body": [
			"int _naRadioGroupValue = -1;",
			"bool _naVoteCasted = false;"
		],
		"description": "Creates variables for NA vote casting."
	},
	"Variables for PA": {
		"prefix": "variablesPA",
		"body": [
			"int _paRadioGroupValue = -1;",
			"bool _paVoteCasted = false;"
		],
		"description": "Creates variables for PA vote casting."
	},
	"PA vote method": {
		"prefix": "voteMethodPA",
		"body": [
			"void _handleRadioValueChangePA(int value) { if (!_paVoteCasted) { setState(() { _paRadioGroupValue = value; }); } }",
		],
		"description": "Creates method for maintaing PA vote state."
	},
	"Submit button": {
		"prefix": "submit",
		"body": [
			"Padding( padding: const EdgeInsets.symmetric( horizontal: 16.0, vertical: 16.0), child: RaisedButton( onPressed: ${voteCasted} ? null : () { if (${radioGroupValue} == -1) { showAlertDialog(context, 'Unable to proceed', 'Please select a party to vote.'); } else { setState(() { ${voteCasted} = true; }); addNationalAssemblyVote(${radioGroupValue}); showAlertDialog(context, 'Success', 'Your vote has been submitted successfully.'); } }, color: Theme.of(context).primaryColor, child: Text( 'SUBMIT', style: TextStyle( color: ${voteCasted} ? Theme.of(context).disabledColor : Theme.of(context).backgroundColor, ), ), ), )"
		],
		"description": "Creates submit button."
	},
	"App bar": {
		"prefix": "appBar",
		"body": [
			"bottom: PreferredSize( preferredSize: Size.fromHeight(88.0), child: Column( children: [ ",
			"// Application title",
			"Text( widget.title, style: TextStyle( color: Theme.of(context).backgroundColor, fontWeight: FontWeight.bold, fontSize: 24.0), ), ",
			"// Election date label",
			"Text( 'SATURDAY, MARCH 16', style: TextStyle(color: Colors.black, fontWeight: FontWeight.w500), ), ",
			"// Time remaining label",
			"Padding( padding: const EdgeInsets.symmetric(vertical: 16.0), child: Text( '${DateTime(2019, 03, 16, 12).difference(DateTime.now()).inMinutes} Minutes Away', style: TextStyle( color: Theme.of(context).backgroundColor, fontWeight: FontWeight.w500), ), ),], ), ),"
		],
		"description": "Creates AppBar."
	},
	"Provincial assembly poll list": {
		"prefix": "pollListPA",
		"body": [
			"// End of first page // // // // // // // ",
			"Container( color: Theme.of(context).backgroundColor, child: Column( children: <Widget>[ //Poll title PollHeader( headerName: 'PROVINCIAL ASSEMBLY', ), ",
			"// List of poll options",
			"Expanded( child: StreamBuilder<QuerySnapshot>( stream: Firestore.instance.collection('polls').snapshots(), builder: (context, snapshot) { if (!snapshot.hasData) return LinearProgressIndicator(); DocumentSnapshot provincialAssemblyPoll = snapshot.data.documents.last; var pollOptionsArray = provincialAssemblyPoll['pollOptionsSindh']; int index = 0; return Padding( padding: const EdgeInsets.only(top: 8.0), child: ListView( children: pollOptionsArray .map<Widget>((data) => buildListItem( data, index++, _paRadioGroupValue, _handleRadioValueChangePA)) .toList(), ), ); }, ), ), ",
			"// Submit button",
			"Padding( padding: const EdgeInsets.symmetric( horizontal: 16.0, vertical: 16.0), child: RaisedButton( onPressed: _paVoteCasted ? null : () { if (_paRadioGroupValue == -1) { showAlertDialog(context, 'Unable to proceed', 'Please select a party to vote.'); } else { setState(() { _paVoteCasted = true; }); addProvincialAssemblyVote(_paRadioGroupValue); showAlertDialog(context, 'Success', 'Your vote has been submitted successfully.'); } }, color: Theme.of(context).primaryColor, child: Text( 'SUBMIT', style: TextStyle( color: _paVoteCasted ? Theme.of(context).disabledColor : Theme.of(context).backgroundColor, ), ), ), ) ], ), ), ",
			"// End of second page // // // // // // //"
		],
		"description": "Creates Poll List Page PA"
	},
	"PageIndicator parameters": {
		"prefix": "pageIndicatorParams",
		"body": [
			"color: Theme.of(context).accentColor,",
			"activeColor: Theme.of(context).backgroundColor,",
			"size: 8.0,",
			"controller: controller,",
			"space: 4.0,",
		],
		"description": "Creates Poll List Page PA"
	}
}