{
	"pac": {
		"prefix": "pac",
		"body": [
			"StreamBuilder<QuerySnapshot>( stream: Firestore.instance.collection('polls').snapshots(), builder: (context, snapshot) { provincialAssemblyPollResultList = new List<ProvincialAssemblyPollResult>();",
			"if (!snapshot.hasData) return LinearProgressIndicator( backgroundColor: Colors.orange, ); DocumentSnapshot first = snapshot.data.documents.last; var pollResults = first['pollOptionsBalochistan'][0];",
			"provincialAssemblyPollResultList.add( new ProvincialAssemblyPollResult( 'Balochistan', pollResults['numberOfVotes'], pollResults['initials'], charts.Color.fromHex( code: pollResults['color'])));",
			"var pollResultsKPK = first['pollOptionsKPK'][0]; provincialAssemblyPollResultList.add( new ProvincialAssemblyPollResult( 'KPK', pollResultsKPK['numberOfVotes'], pollResultsKPK['initials'], charts.Color.fromHex( code: pollResultsKPK['color'])));",
			"var pollResultsPunjab = first['pollOptionsPunjab'][0]; provincialAssemblyPollResultList.add( new ProvincialAssemblyPollResult( 'Punjab', pollResultsPunjab['numberOfVotes'], pollResultsPunjab['initials'], charts.Color.fromHex( code: pollResultsPunjab['color'])));",
			"var pollResultsSindh = first['pollOptionsSindh']; pollResultsSindh.forEach((element) => provinceHelperList.add(new ProvinceHelper(${sindh}, element['numberOfVotes'], element['initials'], charts.Color.fromHex(code: element['color'])))); provinceHelperList .sort((a, b) => a.votes.compareTo(b.votes)); var sindhPartyWithMaxVotes = provinceHelperList[provinceHelperList.length - 1]; provincialAssemblyPollResultList.add( new ProvincialAssemblyPollResult(${sindh2}, sindhPartyWithMaxVotes.votes, sindhPartyWithMaxVotes.party, sindhPartyWithMaxVotes.color)); var provincialSeries = [ charts.Series<ProvincialAssemblyPollResult, String>( id: 'provincialChart', colorFn: (ProvincialAssemblyPollResult winner, _) => winner.color, domainFn: (ProvincialAssemblyPollResult winner, _) => winner.province, measureFn: (ProvincialAssemblyPollResult winner, _) => winner.votes, data: provincialAssemblyPollResultList, labelAccessorFn: (ProvincialAssemblyPollResult winner, _) => winner.party, ), ]; var barChart = charts.BarChart( provincialSeries, animate: false, vertical: false, barRendererDecorator: charts.BarLabelDecorator<String>(), ); return Padding( padding: const EdgeInsets.symmetric(horizontal: 8.0), child: barChart, ); }, ),"
		],
		"description": "Provincial asembly chart"
	},
	"Chart Header" : {
		"prefix": "ch",
		"body": 
		[
			"Padding( padding: const EdgeInsets.only(top: 32.0, left: 16.0), child: Text( ${ChartHeader}, textAlign: TextAlign.start, style: TextStyle( color: Theme.of(context).accentColor, fontWeight: FontWeight.bold), ), ),"
		],
		"description": "Creates submit button for National Assembly poll."
	}
}